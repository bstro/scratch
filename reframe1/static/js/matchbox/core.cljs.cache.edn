;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{take-last take conj! key dissoc! reset! swap! set! parents deref get-in}, :name matchbox.core, :imports nil, :requires {cljsjs.firebase cljsjs.firebase, walk clojure.walk, clojure.walk clojure.walk, matchbox.registry matchbox.registry, utils matchbox.utils, matchbox.utils matchbox.utils, clojure.string clojure.string, str clojure.string}, :uses {register-listener matchbox.registry}, :defs {deref-list {:protocol-inline nil, :meta {:arglists (quote ([ref cb])), :end-column 17, :end-line 186, :column 7, :line 186, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/deref-list, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 17, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb])), :test true}, wrap-snapshot {:protocol-inline nil, :meta {:arglists (quote ([snapshot])), :private true, :end-column 21, :end-line 150, :column 8, :line 150, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/wrap-snapshot, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 21, :method-params ([snapshot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snapshot])), :test true}, auth-anon {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb session-only?])], :arglists [[ref & [cb session-only?]]], :arglists-meta (nil)}, :arglists (quote ([ref & [cb session-only?]])), :end-column 16, :end-line 378, :column 7, :line 378, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/auth-anon, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb session-only?])], :arglists [[ref & [cb session-only?]]], :arglists-meta (nil)}, :method-params [(ref [cb session-only?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 1, :fn-var true, :arglists [[ref & [cb session-only?]]], :test true}, take-last {:protocol-inline nil, :meta {:arglists (quote ([ref limit])), :doc "Limit scope to the last `limit` items", :end-column 16, :end-line 301, :column 7, :line 301, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/take-last, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 16, :method-params ([ref limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref limit])), :doc "Limit scope to the last `limit` items", :test true}, auth-info {:protocol-inline nil, :meta {:arglists (quote ([ref])), :doc "Returns a map of uid, provider, token, expires - or nil if there is no session", :end-column 16, :end-line 384, :column 7, :line 384, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/auth-info, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 16, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Returns a map of uid, provider, token, expires - or nil if there is no session", :test true}, remove! {:meta {:end-column 13, :end-line 234, :column 6, :line 234, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 234, :column 1, :end-line 234, :end-column 13, :test true, :name matchbox.core/remove!}, dissoc-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref korks [cb])], :arglists [[ref korks & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks & [cb]])), :end-column 17, :end-line 417, :column 7, :line 417, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/dissoc-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref korks [cb])], :arglists [[ref korks & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 417, :end-line 417, :max-fixed-arity 2, :fn-var true, :arglists [[ref korks & [cb]]], :test true}, take {:protocol-inline nil, :meta {:arglists (quote ([ref limit])), :doc "Limit scope to the first `limit` items", :end-column 11, :end-line 296, :column 7, :line 296, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/take, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 11, :method-params ([ref limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref limit])), :doc "Limit scope to the first `limit` items", :test true}, listen-children {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :arglists (quote ([ref cb] [ref korks cb])), :doc "Subscribe to all children notifications on a reference.\n   Callback receives [:event-type [<key> <value>]] as only argument\n   Returns an unsubscribe function", :end-column 22, :end-line 475, :column 7, :line 475, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/listen-children, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :method-params ([ref cb] [ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 3, :fn-var true, :arglists ([ref cb] [ref korks cb]), :doc "Subscribe to all children notifications on a reference.\n   Callback receives [:event-type [<key> <value>]] as only argument\n   Returns an unsubscribe function", :test true}, merge! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref val & [cb]])), :end-column 13, :end-line 204, :column 7, :line 204, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/merge!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists [[ref val & [cb]]], :test true}, merge-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks val & [cb]])), :end-column 16, :end-line 408, :column 7, :line 408, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/merge-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 408, :end-line 408, :max-fixed-arity 3, :fn-var true, :arglists [[ref korks val & [cb]]], :test true}, --listen-to {:protocol-inline nil, :meta {:arglists (quote ([ref type cb render-fn])), :end-column 18, :end-line 428, :column 7, :line 428, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/--listen-to, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 18, :method-params ([ref type cb render-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 428, :end-line 428, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ref type cb render-fn])), :test true}, reconnect! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 17, :end-line 314, :column 7, :line 314, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/reconnect!, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, reset-with-priority! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref val priority [cb])], :arglists [[ref val priority & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref val priority & [cb]])), :end-column 27, :end-line 198, :column 7, :line 198, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/reset-with-priority!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref val priority [cb])], :arglists [[ref val priority & [cb]]], :arglists-meta (nil)}, :method-params [(ref val priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 3, :fn-var true, :arglists [[ref val priority & [cb]]], :test true}, order-by-priority {:protocol-inline nil, :meta {:arglists (quote ([ref])), :end-column 24, :end-line 246, :column 7, :line 246, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/order-by-priority, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 24, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :test true}, hydrate-keywords {:protocol-inline nil, :meta {:arglists (quote ([x])), :private true, :end-column 24, :end-line 112, :column 8, :line 112, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/hydrate-keywords, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 24, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, SERVER_TIMESTAMP {:meta {:end-column 22, :end-line 51, :column 6, :line 51, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 51, :column 1, :end-line 51, :end-column 22, :test true, :name matchbox.core/SERVER_TIMESTAMP}, swap-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks f args)], :arglists [[ref korks f & args]], :arglists-meta (nil)}, :arglists (quote ([ref korks f & args])), :end-column 15, :end-line 414, :column 7, :line 414, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/swap-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks f args)], :arglists [[ref korks f & args]], :arglists-meta (nil)}, :method-params [(ref korks f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 3, :fn-var true, :arglists [[ref korks f & args]], :test true}, deref-in {:protocol-inline nil, :meta {:arglists (quote ([ref korks cb])), :end-column 15, :end-line 396, :column 7, :line 396, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/deref-in, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 15, :method-params ([ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 396, :end-line 396, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ref korks cb])), :test true}, conj! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref val & [cb]])), :end-column 12, :end-line 212, :column 7, :line 212, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/conj!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists [[ref val & [cb]]], :test true}, serialize {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 16, :end-line 130, :column 7, :line 130, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/serialize, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 16, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, listen-to {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref type cb] [ref korks type cb]), :arglists ([ref type cb] [ref korks type cb]), :arglists-meta (nil nil)}, :arglists (quote ([ref type cb] [ref korks type cb])), :doc "Subscribe to notifications of given type\n   Callback receives [<key> <value>] as only argument\n   Returns an unsubscribe function", :end-column 16, :end-line 462, :column 7, :line 462, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/listen-to, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([ref type cb] [ref korks type cb]), :arglists ([ref type cb] [ref korks type cb]), :arglists-meta (nil nil)}, :method-params ([ref type cb] [ref korks type cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 4, :fn-var true, :arglists ([ref type cb] [ref korks type cb]), :doc "Subscribe to notifications of given type\n   Callback receives [<key> <value>] as only argument\n   Returns an unsubscribe function", :test true}, ensure-kw-map {:protocol-inline nil, :meta {:arglists (quote ([data])), :doc "Coerce java.util.HashMap and friends to keywordized maps", :private true, :end-column 21, :end-line 343, :column 8, :line 343, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/ensure-kw-map, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 21, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Coerce java.util.HashMap and friends to keywordized maps", :test true}, keywords->strings {:protocol-inline nil, :meta {:arglists (quote ([x])), :private true, :end-column 25, :end-line 109, :column 8, :line 109, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/keywords->strings, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, deref-list-in {:protocol-inline nil, :meta {:arglists (quote ([ref korks cb])), :end-column 20, :end-line 399, :column 7, :line 399, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/deref-list-in, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 20, :method-params ([ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ref korks cb])), :test true}, reset-with-priority-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params [(ref korks val priority [cb])], :arglists [[ref korks val priority & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks val priority & [cb]])), :end-column 30, :end-line 405, :column 7, :line 405, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/reset-with-priority-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(ref korks val priority [cb])], :arglists [[ref korks val priority & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks val priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 4, :fn-var true, :arglists [[ref korks val priority & [cb]]], :test true}, order-by-value {:protocol-inline nil, :meta {:arglists (quote ([ref])), :end-column 21, :end-line 252, :column 7, :line 252, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/order-by-value, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 21, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :test true}, key {:protocol-inline nil, :meta {:arglists (quote ([ref])), :doc "Last segment in reference or snapshot path", :end-column 10, :end-line 137, :column 7, :line 137, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/key, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 10, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Last segment in reference or snapshot path", :test true}, parent {:protocol-inline nil, :meta {:arglists (quote ([ref])), :doc "Immediate ancestor of reference, if any", :end-column 13, :end-line 170, :column 7, :line 170, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/parent, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 13, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Immediate ancestor of reference, if any", :test true}, order-by-child {:protocol-inline nil, :meta {:arglists (quote ([ref key])), :end-column 21, :end-line 255, :column 7, :line 255, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/order-by-child, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 21, :method-params ([ref key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref key])), :test true}, connected? {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Returns boolean around whether client is set to synchronise with server.\n   Says nothing about actual connectivity.", :end-column 17, :end-line 318, :column 7, :line 318, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/connected?, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns boolean around whether client is set to synchronise with server.\n   Says nothing about actual connectivity.", :test true}, reset-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks val & [cb]])), :end-column 16, :end-line 402, :column 7, :line 402, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/reset-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 402, :end-line 402, :max-fixed-arity 3, :fn-var true, :arglists [[ref korks val & [cb]]], :test true}, build-opts {:protocol-inline nil, :meta {:arglists (quote ([session-only?])), :end-column 17, :end-line 338, :column 7, :line 338, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/build-opts, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 17, :method-params ([session-only?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([session-only?])), :test true}, start-at {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :arglists (quote ([ref value & [key]])), :doc "Limit query to start at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to start at, and is supported only when ordering by priority.", :end-column 15, :end-line 260, :column 7, :line 260, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/start-at, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists [[ref value & [key]]], :doc "Limit query to start at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to start at, and is supported only when ordering by priority.", :test true}, listen-list {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :arglists (quote ([ref cb] [ref korks cb])), :doc "Subscribe to updates containing full vector or children", :end-column 18, :end-line 469, :column 7, :line 469, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/listen-list, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ref cb] [ref korks cb]), :arglists ([ref cb] [ref korks cb]), :arglists-meta (nil nil)}, :method-params ([ref cb] [ref korks cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 469, :end-line 469, :max-fixed-arity 3, :fn-var true, :arglists ([ref cb] [ref korks cb]), :doc "Subscribe to updates containing full vector or children", :test true}, dissoc! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb])], :arglists [[ref & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref & [cb]])), :end-column 14, :end-line 226, :column 7, :line 226, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/dissoc!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref [cb])], :arglists [[ref & [cb]]], :arglists-meta (nil)}, :method-params [(ref [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists [[ref & [cb]]], :test true}, connect {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([url] [url korks]), :arglists ([url] [url korks]), :arglists-meta (nil nil)}, :arglists (quote ([url] [url korks])), :doc "Create a reference for firebase", :end-column 14, :end-line 162, :column 7, :line 162, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/connect, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([url] [url korks]), :arglists ([url] [url korks]), :arglists-meta (nil nil)}, :method-params ([url] [url korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists ([url] [url korks]), :doc "Create a reference for firebase", :test true}, value {:protocol-inline nil, :meta {:arglists (quote ([snapshot])), :doc "Data stored within snapshot", :end-column 12, :end-line 143, :column 7, :line 143, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/value, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 12, :method-params ([snapshot]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([snapshot])), :doc "Data stored within snapshot", :test true}, reset! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref val & [cb]])), :end-column 13, :end-line 191, :column 7, :line 191, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/reset!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref val [cb])], :arglists [[ref val & [cb]]], :arglists-meta (nil)}, :method-params [(ref val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists [[ref val & [cb]]], :test true}, -listen-to {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref type cb [render-fn])], :arglists [[ref type cb & [render-fn]]], :arglists-meta (nil)}, :arglists (quote ([ref type cb & [render-fn]])), :private true, :end-column 18, :end-line 445, :column 8, :line 445, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/-listen-to, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref type cb [render-fn])], :arglists [[ref type cb & [render-fn]]], :arglists-meta (nil)}, :method-params [(ref type cb [render-fn])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 3, :fn-var true, :arglists [[ref type cb & [render-fn]]], :test true}, on-disconnect {:protocol-inline nil, :meta {:arglists (quote ([ref])), :doc "Return an on", :end-column 20, :end-line 327, :column 7, :line 327, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/on-disconnect, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 20, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Return an on", :test true}, unauth {:protocol-inline nil, :meta {:arglists (quote ([ref])), :end-column 13, :end-line 391, :column 7, :line 391, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/unauth, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 13, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :test true}, all-events {:meta {:end-column 16, :end-line 46, :column 6, :line 46, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 46, :column 1, :end-line 46, :end-column 16, :test true, :name matchbox.core/all-events}, connected {:meta {:end-column 19, :end-line 308, :column 10, :line 308, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 308, :column 1, :end-line 308, :end-column 19, :test true, :name matchbox.core/connected}, equal-to {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :arglists (quote ([ref value & [key]])), :doc "Limit query to `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n  `key` is the child key to end at, and is supported only when ordering by priority.", :end-column 15, :end-line 284, :column 7, :line 284, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/equal-to, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists [[ref value & [key]]], :doc "Limit query to `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n  `key` is the child key to end at, and is supported only when ordering by priority.", :test true}, swap! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref f args)], :arglists [[ref f & args]], :arglists-meta (nil)}, :arglists (quote ([ref f & args])), :doc "Update value atomically, with local optimistic writes", :end-column 12, :end-line 216, :column 7, :line 216, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/swap!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref f args)], :arglists [[ref f & args]], :arglists-meta (nil)}, :method-params [(ref f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists [[ref f & args]], :doc "Update value atomically, with local optimistic writes", :test true}, order-by-key {:protocol-inline nil, :meta {:arglists (quote ([ref])), :end-column 19, :end-line 249, :column 7, :line 249, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/order-by-key, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 19, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :test true}, auth {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb session-only?])], :arglists [[ref email password & [cb session-only?]]], :arglists-meta (nil)}, :arglists (quote ([ref email password & [cb session-only?]])), :end-column 11, :end-line 371, :column 7, :line 371, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/auth, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref email password [cb session-only?])], :arglists [[ref email password & [cb session-only?]]], :arglists-meta (nil)}, :method-params [(ref email password [cb session-only?])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 3, :fn-var true, :arglists [[ref email password & [cb session-only?]]], :test true}, child-events {:meta {:end-column 18, :end-line 26, :column 6, :line 26, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 26, :column 1, :end-line 26, :end-column 18, :test true, :name matchbox.core/child-events}, disconnect! {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 310, :column 7, :line 310, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/disconnect!, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, set-priority-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks priority [cb])], :arglists [[ref korks priority & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks priority & [cb]])), :end-column 23, :end-line 422, :column 7, :line 422, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/set-priority-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks priority [cb])], :arglists [[ref korks priority & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 3, :fn-var true, :arglists [[ref korks priority & [cb]]], :test true}, conj-in! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref korks val & [cb]])), :end-column 15, :end-line 411, :column 7, :line 411, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/conj-in!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ref korks val [cb])], :arglists [[ref korks val & [cb]]], :arglists-meta (nil)}, :method-params [(ref korks val [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 3, :fn-var true, :arglists [[ref korks val & [cb]]], :test true}, wrap-auth-cb {:protocol-inline nil, :meta {:arglists (quote ([cb])), :private true, :end-column 20, :end-line 358, :column 8, :line 358, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/wrap-auth-cb, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 20, :method-params ([cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb])), :test true}, hydrate {:protocol-inline nil, :meta {:arglists (quote ([v])), :end-column 14, :end-line 124, :column 7, :line 124, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/hydrate, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, remove-in! {:meta {:end-column 16, :end-line 420, :column 6, :line 420, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 420, :column 1, :end-line 420, :end-column 16, :test true, :name matchbox.core/remove-in!}, -listen-children {:protocol-inline nil, :meta {:arglists (quote ([ref cb])), :private true, :end-column 24, :end-line 452, :column 8, :line 452, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/-listen-children, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 24, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 452, :end-line 452, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb])), :test true}, undefined {:meta {:end-column 22, :end-line 49, :column 13, :line 49, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :file "static/js/matchbox/core.cljs", :line 49, :column 8, :end-line 49, :end-column 22, :test true, :name matchbox.core/undefined}, end-at {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :arglists (quote ([ref value & [key]])), :doc "Limit query to end at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to end at, and is supported only when ordering by priority.", :end-column 13, :end-line 272, :column 7, :line 272, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/end-at, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref value [key])], :arglists [[ref value & [key]]], :arglists-meta (nil)}, :method-params [(ref value [key])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists [[ref value & [key]]], :doc "Limit query to end at `value` (inclusive). By default `value` is compared against\n   priorities, but reacts to the `order-by-*` scope. This also affects what types\n   `value can take on.\n\n   `key` is the child key to end at, and is supported only when ordering by priority.", :test true}, parents {:protocol-inline nil, :meta {:arglists (quote ([ref])), :doc "Probably don't need this. Or maybe we want more zipper nav (siblings, in-order, etc)", :end-column 14, :end-line 177, :column 7, :line 177, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/parents, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 14, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Probably don't need this. Or maybe we want more zipper nav (siblings, in-order, etc)", :test true}, auth-data->map {:protocol-inline nil, :meta {:arglists (quote ([auth-data])), :private true, :end-column 22, :end-line 348, :column 8, :line 348, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :private true, :name matchbox.core/auth-data->map, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 22, :method-params ([auth-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([auth-data])), :test true}, deref {:protocol-inline nil, :meta {:arglists (quote ([ref cb])), :end-column 12, :end-line 182, :column 7, :line 182, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/deref, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 12, :method-params ([ref cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref cb])), :test true}, set-priority! {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref priority [cb])], :arglists [[ref priority & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref priority & [cb]])), :end-column 20, :end-line 236, :column 7, :line 236, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/set-priority!, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref priority [cb])], :arglists [[ref priority & [cb]]], :arglists-meta (nil)}, :method-params [(ref priority [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists [[ref priority & [cb]]], :test true}, cancel {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-disconnect [cb])], :arglists [[ref-disconnect & [cb]]], :arglists-meta (nil)}, :arglists (quote ([ref-disconnect & [cb]])), :end-column 13, :end-line 332, :column 7, :line 332, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/cancel, :variadic true, :file "static/js/matchbox/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ref-disconnect [cb])], :arglists [[ref-disconnect & [cb]]], :arglists-meta (nil)}, :method-params [(ref-disconnect [cb])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists [[ref-disconnect & [cb]]], :test true}, get-in {:protocol-inline nil, :meta {:arglists (quote ([ref korks])), :doc "Obtain child reference from base by following korks", :end-column 13, :end-line 156, :column 7, :line 156, :file "/Users/bstro/Dropbox/Developer/scratch/reframe1/static/js/matchbox/core.cljs"}, :name matchbox.core/get-in, :variadic false, :file "static/js/matchbox/core.cljs", :end-column 13, :method-params ([ref korks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ref korks])), :doc "Obtain child reference from base by following korks", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:child-added :child-changed :child-moved :child-removed :value :keywordize-keys], :seen #{:child-moved :value :child-removed :child-changed :keywordize-keys :child-added}}, :doc nil}